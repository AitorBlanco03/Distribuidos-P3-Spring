#
# Docker-Compose para poder gestionar y ejecutar de forma simultánea
# y sincroniza la aplicación web y la API dentro de Docker.
#
# Autor: Aitor Blanco Fernández, abf1005@alu.ubu.es
# Versión: 1.1.0, 30/05/25.
#

version: '3.8'

services:

  # Definimos un servicio independiente para gestionar y ejecutar la aplicación web.
  spring-app:
    build:
      context: .
      dockerfile: Dockerfile.spring
    ports:
      - "8080:8080"
    networks:
      - app-network
    depends_on:
      - mysql-db
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-db:3306/hollowflame?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update

  # Definimos un servicio independiente para gestionar y ejecutar la API.
  flask-api:
    build:
      context: .
      dockerfile: Dockerfile.flask
    ports:
      - "5000:5000"
    networks:
      - app-network

  # Definimos un servicio independiente para levantar, gestionar y ejecutar la base de datos.
  mysql-db:
    image: mysql:8.0
    container_name: hollowflame-mysql
    restart: always
    environment:
      MYSQL_DATABASE: hollowflame
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: rootpass
    ports:
      - "3306:3306"
    networks:
        - app-network
    volumes:
      - mysql_data:/var/lib/mysql

# Definimos una red para gestionar y coordinar la comunicación entre los diferentes servicios.
networks:
  app-network:
    driver: bridge

# Definimos un volumen persistente para almacenar la base de datos junto a sus registros.
volumes:
  mysql_data: